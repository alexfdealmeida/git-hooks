#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

tagHookName="[commit-msg]"
tagHookVersion="1.0.1"

# Branches
BRANCH_MAIN="main"
BRANCH_PRODUCTION="production"
BRANCH_DEVELOP="develop"
BRANCH_PREFIX="Branch:"

# Messages
MESSAGE_ERROR="ERROR: "
MESSAGE_INFO="info: "
MESSAGE_HELP_SCM="Em caso de duvidas, entre em contato com a equipe de GCS."

# RegEx
REGEX_TASK_ID_MESSAGE="[;][ ]+#[0-9]+[ ][-][ ]+[a-zA-Z0-9].{15,}.+$"
REGEX_PREFIX_BRANCH="^$BRANCH_PREFIX[ ][a-zA-Z0-9]{2}"
REGEX_TASK_ID="; #[a-zA-Z0-9]+ - "
REGEX_TASK_ID_ONLY_NUMBERS="#[0-9]+"
REGEX_ONLY_NUMBERS="^[0-9]+$"
REGEX_BUGFIX_BRANCH="^bugfix-[0-9]+$"
REGEX_FEATURE_BRANCH="^feature-[0-9]+$"
REGEX_TRAINING_BRANCH="^training-[0-9]+$"
REGEX_EPIC_BRANCH="^epic-[0-9]+$"
REGEX_RELEASE_BRANCH="^release-[0-9]+-[0-9]+-[0-9]+$|^release-[0-9]+\.[0-9]+\.[0-9]+$"
REGEX_PACKAGE_BRANCH="^package-arq-[0-9]+-[0-9]+-[0-9]+$|^package-arq-[0-9]+\.[0-9]+\.[0-9]+$|^package-arq-[0-9]+$"
REGEX_HOTFIX_BRANCH="^hotfix-[0-9]+$"
REGEX_HOTFIX_PRODUCTION_BRANCH="^hotfix-production-[0-9]+$"
REGEX_HOTFIX_PRODUCTION_VERSION_BRANCH="^version\/[0-9]+\.[0-9]+\.[0-9]+\/production\/hotfix\/[0-9]+$"
REGEX_HOTFIX_VERSION_BRANCH="^version\/[0-9]+\.[0-9]+\.[0-9]+\/main\/hotfix\/[0-9]+$"
REGEX_PRODUCTION_VERSION="^version\/production\/[0-9]+\.[0-9]+\.[0-9]+$"
REGEX_MAIN_VERSION="^version\/main\/[0-9]+\.[0-9]+\.[0-9]+$"

# Required versions
REQUIRED_VERSION_GSK="17.1.3"

pathGitUsrBin64="/c/Program Files/Git/usr/bin"
pathGitUsrBin32="/c/Program Files (x86)/Git/usr/bin"

pathBase64="base64"
pathPrintf="printf"
pathSort="sort"
pathHead="head"

if [ -d "$pathGitUsrBin64" ]; then
	pathBase64="$pathGitUsrBin64/base64.exe"
	pathPrintf="$pathGitUsrBin64/printf.exe"
	pathSort="$pathGitUsrBin64/sort.exe"
	pathHead="$pathGitUsrBin64/head.exe"
elif [ -d "$pathGitUsrBin32" ]; then
	pathBase64="$pathGitUsrBin32/base64.exe"
	pathPrintf="$pathGitUsrBin32/printf.exe"
	pathSort="$pathGitUsrBin32/sort.exe"
	pathHead="$pathGitUsrBin32/head.exe"
fi

currentBranchName="$(git branch | sed -e '/^\*/!d' -e 's|*||' -e 's| ||')"

prefixCurrentBranch="$BRANCH_PREFIX $currentBranchName"

commitMessagePattern="$BRANCH_PREFIX currentBranchName; #TaskId - Message"

repositoryUrl="$(git config --local --get remote.origin.url)"

repositoryName="$(basename -s .git "$repositoryUrl")"

isEpicBranch=false
gskInstalled=false
isSCMProfile=false
userSCM=false
taskIdBranchName=""

if [[ "$currentBranchName" =~ $REGEX_BUGFIX_BRANCH ]] || [[ "$currentBranchName" =~ $REGEX_FEATURE_BRANCH ]] || [[ "$currentBranchName" =~ $REGEX_TRAINING_BRANCH ]] || [[ "$currentBranchName" =~ $REGEX_EPIC_BRANCH ]] || [[ "$currentBranchName" =~ $REGEX_HOTFIX_PRODUCTION_BRANCH ]] || [[ "$currentBranchName" =~ $REGEX_HOTFIX_BRANCH ]]; then
	taskIdBranchName="$(echo "$currentBranchName" | sed -e "s/[^0-9]//g")"

	if [[ "$currentBranchName" =~ $REGEX_EPIC_BRANCH ]]; then
		isEpicBranch=true
	fi
elif [[ "$currentBranchName" =~ $REGEX_HOTFIX_VERSION_BRANCH ]] || [[ "$currentBranchName" =~ $REGEX_HOTFIX_PRODUCTION_VERSION_BRANCH ]]; then
	taskIdBranchName="$(echo "$currentBranchName" | cut -d '/' -f 5)"
fi

gskEnvironmentVariable=$SiagriGSK

if [ -n "$gskEnvironmentVariable" ]; then
	command -v gsk > /dev/null 2>&1

	if [ $? -eq 0 ]; then
		gskInstalled=true

		isSCMProfile="$(is_scm_profile)"
	fi
fi

# author="$(git var GIT_AUTHOR_IDENT | cut -d '<' -f 1 | sed 's/ //g')"
author="$(git config --global --get user.name)"

if [ "$isSCMProfile" == true ]; then
	SiagriGSKSUserSCMEnvironmentVariable=$SiagriGSKSUserSCM

	if [ -n "$SiagriGSKSUserSCMEnvironmentVariable" ]; then
		if [ "$author" == "$(echo $SiagriGSKSUserSCMEnvironmentVariable | "$pathBase64" -d)" ]; then
			userSCM=true
		fi
	fi
fi

setCommitMessage () {
	commitMessage="$(cat "$1")"
}

setCommitMessage "$1"

# Ao adicionar um repositorio, deve-se manter o ";" no final da string, para evitar resultado "falso-positivo"
repositoriesGSKFlow=";"

if [[ "$repositoriesGSKFlow" =~ "$repositoryName;" ]]; then
	repositoryUsesGSKFlow=true
else
	repositoryUsesGSKFlow=false
fi

validateGSKVersion () {
	if ! [[ "$commitMessage" =~ "$(echo LS1uby12ZXJpZnktc2lhZ3JpZ3NrLXZlcnNpb24K | "$pathBase64" -d)" ]]; then
		if [ "$gskInstalled" == true ]; then
			echo "$tagHookName $MESSAGE_INFO"
			echo "Verificando a versao do GSK"
			echo ""

			currentVersionGSK="$(gsk_version_short)"

			if [ "$("$pathPrintf" "%s\n" "$REQUIRED_VERSION_GSK" "$currentVersionGSK" | "$pathSort" -V | "$pathHead" -n1)" != "$REQUIRED_VERSION_GSK" ]; then
				echo "$tagHookName $MESSAGE_ERROR"
				echo "A versao do GSK esta DESATUALIZADA!"
				echo "Versao atual: $currentVersionGSK"
				echo "Versao minima requerida: $REQUIRED_VERSION_GSK"
				echo "Portanto, deve-se atualiza-lo, utilizando o seguinte comando: 'gsk update'."
				echo "$MESSAGE_HELP_SCM"
				exit 1
			fi

			gsk_version
			echo ""
		else
			echo "$tagHookName $MESSAGE_INFO"
			echo "Nao foi possivel verificar a versao do GSK, pois ele NAO esta instalado!"
			echo ""
		fi
	fi
}

showVariables () {
	echo "$tagHookName $MESSAGE_INFO"
	echo "Exibindo valor das variaveis"
	echo "author: $author"
	echo "currentBranchName: $currentBranchName"
	echo "gskInstalled: $gskInstalled"
	echo "isEpicBranch: $isEpicBranch"
	echo "isSCMProfile: $isSCMProfile"
	echo "pathBase64: $pathBase64"
	echo "pathPrintf: $pathPrintf"
	echo "pathSort: $pathSort"
	echo "pathHead: $pathHead"
	echo "repositoryUsesGSKFlow: $repositoryUsesGSKFlow"
	echo "repositoryName: $repositoryName"
	# echo "repositoryUrl: $repositoryUrl"
	echo "taskIdBranchName: $taskIdBranchName"
	echo "userSCM: $userSCM"
	echo ""
}

showProtectedFilesMessage () {
	if ! ( [ "$userSCM" == true ] && [[ "$commitMessage" =~ "$(echo LS1uby12ZXJpZnktcG9saWNpZXMtcHJvdGVjdGVkLWZpbGVzCg== | "$pathBase64" -d)" ]] ); then
		echo "$tagHookName $MESSAGE_ERROR"
		echo "Arquivo/diretorio protegido pelas politicas de seguranca da GCS!"
		echo "Arquivo: $filePath"
		echo "$MESSAGE_HELP_SCM"
		exit 1
	fi
}

echo ""

validateGSKVersion

showVariables

echo "$tagHookName $MESSAGE_INFO"
echo "Verificando se o branch '$currentBranchName' corresponde a um branch valido"
echo ""

#Tratamento para contemplar as seguintes situacoes:
#(no branch) - commit
#(no branch, rebasing stable) - rebase
#(HEAD detached at 9.9.9) - tag
if [[ "$currentBranchName" =~ "(" ]]; then
	echo "$tagHookName $MESSAGE_ERROR"
	echo "Branch invalido: '$currentBranchName'!"
	echo "Portanto, deve-se posicionar em um branch valido antes de tentar fazer o commit novamente."
	exit 1
fi

echo "$tagHookName $MESSAGE_INFO"
echo "Verificando se a mensagem do commit possui o prefixo '$prefixCurrentBranch'"
echo ""

if ! [[ "$commitMessage" =~ $REGEX_PREFIX_BRANCH ]]; then
	if [ -n "$taskIdBranchName" ] && [ "$isEpicBranch" == false ]; then
		if ! [[ "$commitMessage" =~ "#$taskIdBranchName" ]] && ! [[ "$commitMessage" =~ $REGEX_TASK_ID_ONLY_NUMBERS ]]; then
			echo "#$taskIdBranchName"" - $commitMessage" > "$1"
			echo "$tagHookName $MESSAGE_INFO"
			setCommitMessage "$1"
			echo "Adicionada a tarefa #$taskIdBranchName no inicio da mensagem do commit"
		fi
	fi

	echo "${prefixCurrentBranch}; $commitMessage" > "$1"
	setCommitMessage "$1"
	echo "$tagHookName $MESSAGE_INFO"
	echo "Adicionado o prefixo '$prefixCurrentBranch' na mensagem do commit"
	echo "Mensagem do commit atualizada:"
	echo "$commitMessage"
	echo ""
elif ! [[ "$commitMessage" =~ ";" ]]; then
	echo "$tagHookName $MESSAGE_ERROR"
	echo "O prefixo do branch informado na mensagem do commit esta invalido!"
	echo "Mensagem do commit:"
	echo "$commitMessage"
	echo "Exemplo do padrao esperado: '$commitMessagePattern'"
	exit 1
fi

if ! [[ "$commitMessage" =~ ^"${prefixCurrentBranch}" ]]; then
	echo "$tagHookName $MESSAGE_ERROR"
	echo "O prefixo do branch informado na mensagem do commit NAO corresponde ao nome do branch atual '$currentBranchName'!"
	echo "Mensagem do commit:"
	echo "$commitMessage"
	echo "Exemplo do padrao esperado: '$commitMessagePattern'"
	exit 1
fi

if [[ "$commitMessage" =~ $REGEX_TASK_ID ]]; then
	echo "$tagHookName $MESSAGE_INFO"
	echo "Verificando se o id da tarefa informado na mensagem do commit contem apenas numeros"
	echo ""

	taskIdCommitMessage="$(echo $commitMessage | cut -d '#' -f 2 | cut -d '-' -f 1 | sed 's/ //g')"

	if ! [[ "$taskIdCommitMessage" =~ $REGEX_ONLY_NUMBERS ]]; then
		echo "$tagHookName $MESSAGE_ERROR"
		echo "O id da tarefa informado na mensagem do commit deve conter apenas numeros: #$taskIdCommitMessage!"
		echo "Mensagem do commit:"
		echo "$commitMessage"
		exit 1
	fi
else
	taskIdCommitMessage=""
fi

if ! ( [ "$userSCM" == true ] && [[ "$commitMessage" =~ "$(echo LS1uby12ZXJpZnktcG9saWNpZXMtaG9vawo= | "$pathBase64" -d)" ]] ); then
	if ! [[ "$commitMessage" =~ "$(echo LS1uby12ZXJpZnktbWVzc2FnZS1wYXR0ZXJuCg== | "$pathBase64" -d)" ]]; then
		if ! [[ "$commitMessage" =~ "$(echo LS1uby12ZXJpZnktdGFzay1pZC1jb21taXQtbWVzc2FnZS1tYXRjaGVzLWJyYW5jaC1uYW1lCg== | "$pathBase64" -d)" ]]; then
			if [ -n "$taskIdBranchName" ] && [ "$isEpicBranch" == false ]; then
				echo "$tagHookName $MESSAGE_INFO"
				echo "Verificando se a tarefa #$taskIdCommitMessage, informada na mensagem do commit, corresponde ao esperado no branch '$currentBranchName'"
				echo ""

				if ! [[ "$commitMessage" =~ "#$taskIdBranchName" ]]; then
					echo "$tagHookName $MESSAGE_ERROR"
					echo "O id da tarefa, informado na mensagem do commit, NAO esta de acordo com o nome do branch!"
					echo "Portanto, deve-se ajusta-la antes de tentar fazer o commit novamente."
					echo "Branch: $currentBranchName"
					echo "Id da tarefa atual: #$taskIdCommitMessage"
					echo "Id da tarefa esperado: #$taskIdBranchName"
					echo "$MESSAGE_HELP_SCM"
					exit 1
				fi
			fi
		fi

		if [ "$repositoryUsesGSKFlow" == true ]; then
			echo "$tagHookName $MESSAGE_INFO"
			echo "Verificando se a mensagem do commit esta no padrao esperado '$commitMessagePattern'"
			echo ""

			if ! [[ "$commitMessage" =~ $REGEX_TASK_ID_MESSAGE ]]; then
				echo "$tagHookName $MESSAGE_ERROR"
				echo "A mensagem do commit NAO esta no padrao esperado!"
				echo "Portanto, deve-se ajusta-la antes de tentar fazer o commit novamente."
				echo "Exemplo: #TaskId - Message (a mensagem deve conter no minimo 15 caracteres)"
				echo "Regex: $REGEX_TASK_ID_MESSAGE"
				echo "$MESSAGE_HELP_SCM"
				exit 1
			fi
		fi

		if [ "$isEpicBranch" == true ]; then
			echo "$tagHookName $MESSAGE_INFO"
			echo "Verificando se o id da tarefa epica (parent) foi informado na mensagem do commit"
			echo ""

			if [[ "$commitMessage" =~ "#$taskIdBranchName" ]]; then
				echo "$tagHookName $MESSAGE_ERROR"
				echo "A tarefa epica (parent) NAO pode ser informada na mensagem do commit!"
				echo "Portanto, deve-se informar uma tarefa filha (child) antes de tentar fazer o commit novamente."
				echo "Id da tarefa epica: #$taskIdBranchName"
				echo "$MESSAGE_HELP_SCM"
				exit 1
			fi
		fi
	fi

	if [ "$repositoryUsesGSKFlow" == true ]; then
		if ! ( [ "$userSCM" == true ] && [[ "$commitMessage" =~ "$(echo LS1uby12ZXJpZnktbWVzc2FnZS1wYXR0ZXJuCg== | "$pathBase64" -d)" ]] ); then
			if [ "$currentBranchName" == "$BRANCH_DEVELOP" ] || [ "$currentBranchName" == "$BRANCH_PRODUCTION" ] || [ "$currentBranchName" == "$BRANCH_MAIN" ]; then
				echo "$tagHookName $MESSAGE_ERROR"
				echo "NAO eh permitido fazer um commit diretamente no branch '$currentBranchName'!"
				echo "$MESSAGE_HELP_SCM"
				exit 1
			fi
		fi
	fi

	if ! [[ "$commitMessage" =~ "$(echo LS1uby12ZXJpZnktcmVtb3RlLWJyYW5jaC1kZWxldGVkCg== | "$pathBase64" -d)" ]]; then
		configBranchRemote="$(git config --local --get branch.$currentBranchName.remote)"

		if [ -n "$configBranchRemote" ]; then
			echo "$tagHookName $MESSAGE_INFO"
			echo "Buscando referencias do branch '$currentBranchName' no repositorio remoto"
			git fetch origin $currentBranchName

			if [ "$?" -ne "0" ]; then
				echo "$tagHookName $MESSAGE_ERROR"
				echo "Nao foi possivel fazer o commit no branch local '$currentBranchName'!" 
				echo "Pois o branch remoto 'origin/$currentBranchName' ja foi apagado ou nao foi possivel conectar com o repositorio remoto."
				echo "$MESSAGE_HELP_SCM"
				exit 1
			else
				echo ""
			fi
		fi
	fi

	listFiles="$(git diff --cached --name-status | tr '\t' '|')"

	#echo "$listFiles"

	if [ -n "$listFiles" ]; then
		echo "$tagHookName $MESSAGE_INFO"
		echo "Verificando regras de commit no(s) arquivo(s):"

		while read -r line; do
			status="$(echo $line | cut -d '|' -f 1)"
			status="${status^^}"

			# Se o status for 'Rename'...
			if [[ "$status" =~ "R" ]]; then
				# ... o novo nome do arquivo, corresponde a terceira posicao separada por pipe '|'
				# Exemplos:
				#R100|Mapas/classes/integracao/layout/agriQ/IntegracaoAgriQ.mm|Mapas/classes/integracao/layout/agriqs/IntegracaoAgriQ.mm
				#R099|Mapas/classes/integracao/layout/agriQ/TipoServicoAgriQ.mm|Mapas/classes/integracao/layout/agriqs/TipoServicoAgriQ.mm
				filePath="$(echo $line | cut -d '|' -f 3)"
			else
				filePath="$(echo $line | cut -d '|' -f 2)"
			fi

			filePathLowercase="${filePath,,}"

			file="$(basename -- "$filePath")"

			fileLowercase="${file,,}"

			extension="${file##*.}"
			extension="${extension,,}"

			echo "$filePath"

			#echo "Line: $line"
			#echo "Status: $status"
			#echo "FilePath: $filePath"
			#echo "File: $file"
			#echo "Extension: $extension"

			if [ "$extension" == "sh" ]; then
				if [ "$filePathLowercase" == "copy-git-hooks.sh" ] || [ "$filePathLowercase" == "getting-started.sh" ] || [ "$filePathLowercase" == "git-config-local-default.sh" ] || 
				   [ "$filePathLowercase" == "git-submodules-init.sh" ] || [ "$filePathLowercase" == "git-submodules-update.sh" ] ||
				   [ "$filePathLowercase" == "git-submodules-init-ci.sh" ] || [ "$filePathLowercase" == "git-create-tag-ci.sh" ] || 
				   [ "$filePathLowercase" == "get-new-version-ci.sh" ] || [ "$filePathLowercase" == "has-changes-ci.sh" ]; then
					showProtectedFilesMessage
				fi
			elif [ "$filePathLowercase" == ".gitmodules" ] || [ "$filePathLowercase" == ".gitattributes" ] || [ "$filePathLowercase" == "project.properties" ]; then
				showProtectedFilesMessage
			fi

			if ! [[ "$commitMessage" =~ "$(echo LS1uby12ZXJpZnktY29uZmxpY3QtbWFya2VyCg== | "$pathBase64" -d)" ]]; then
				# Contemplar '<<<<<<< HEAD' (commit) e '<<<<<<< Updated upstream' (stash)
				fileWithConflictMarker="$(git grep --name-only -E "^(<<<<<<<|>>>>>>>)|^=======$" -- "$filePath")"

				if [ -n "$fileWithConflictMarker" ]; then
					echo "$tagHookName $MESSAGE_ERROR"
					echo "NAO eh permitido fazer commit de um arquivo que contenha marcacao de conflitos!"
					echo "Portanto, deve-se resolver as marcacoes (<<<<<<<, ======= e >>>>>>>) antes de tentar fazer o commit novamente."
					echo "Arquivo: $filePath"
					echo "$MESSAGE_HELP_SCM"
					exit 1
				fi
			fi
		done <<< "$listFiles"

		echo ""
	fi
fi